scale_color_distiller(type = "qual", palette = 1)
# Visualize the data
dat %>%
unnest(Simulations) %>%
ggplot(aes(x = x, y = y, col = as.factor(ID))) +
geom_point() +
theme_minimal() +
geom_smooth(method = "lm") +
scale_color_distiller()
# Visualize the data
dat %>%
unnest(Simulations) %>%
ggplot(aes(x = x, y = y, col = as.factor(ID))) +
geom_point() +
theme_minimal() +
geom_smooth(method = "lm") +
scale_color_brewer()
# Visualize the data
dat %>%
unnest(Simulations) %>%
ggplot(aes(x = x, y = y, col = as.factor(ID))) +
geom_point() +
theme_minimal() +
geom_smooth(method = "lm") +
scale_color_brewer(type = "qual")
# Visualize the data
dat %>%
unnest(Simulations) %>%
ggplot(aes(x = x, y = y, col = as.factor(ID))) +
geom_point() +
theme_minimal() +
geom_smooth(method = "lm") +
scale_color_brewer(type = "qual", palette = 2)
# Visualize the data
dat %>%
unnest(Simulations) %>%
ggplot(aes(x = x, y = y, col = as.factor(ID))) +
geom_point() +
theme_minimal() +
geom_smooth(method = "lm") +
scale_color_brewer(type = "qual", palette = 3)
# Visualize the data
dat %>%
unnest(Simulations) %>%
ggplot(aes(x = x, y = y, col = as.factor(ID))) +
geom_point() +
theme_minimal() +
geom_smooth(method = "lm") +
scale_color_brewer(type = "qual", palette = 4)
# Visualize the data
dat %>%
unnest(Simulations) %>%
ggplot(aes(x = x, y = y, col = as.factor(ID), fill = as.factor(ID))) +
geom_point() +
theme_minimal() +
geom_smooth(method = "lm")
# Visualize the data
dat %>%
unnest(Simulations) %>%
ggplot(aes(x = x, y = y, col = as.factor(ID), fill = as.factor(ID))) +
geom_point() +
theme_minimal() +
geom_smooth(method = "lm", alpha = 0.2)
# Visualize the data
dat %>%
unnest(Simulations) %>%
ggplot(aes(x = x, y = y, col = as.factor(ID), fill = as.factor(ID))) +
geom_point() +
theme_minimal() +
geom_smooth(method = "lm", alpha = 0.2, lwd = 0.2)
# Visualize the data
dat %>%
unnest(Simulations) %>%
ggplot(aes(x = x, y = y, col = as.factor(ID), fill = as.factor(ID))) +
geom_point() +
theme_minimal() +
geom_smooth(method = "lm")
x <- 1
mod   <- lm(y ~ x, data = x)
x <- dat$Simulations[[1]]
mod   <- lm(y ~ x, data = x)
coefs <- summar(mod)$coefficients
coefs <- summary(mod)$coefficients
coefs
coefs <- as.data.frame(summary(mod)$coefficients)
coefs
coefs <- broom::tidy(mod)
coefs
coef(mod)
# Run linear model on each individual
dat <- mutate(dat, LinearModel = map(Simulations, function(x) {
mod   <- lm(y ~ x, data = x)
coefs <- broom::tidy(mod)
return(coefs)
}))
print(dat)
# Run linear model on each individual
dat <- mutate(dat, Model = map(Simulations, function(x) {
mod   <- lm(y ~ x, data = x)
return(mod)
}))
# Simulate data for each individual
dat <- mutate(dat, Simulations = map(ID, function(x) {
simDat(n = 50)
}))
# Visualize the data
dat %>%
unnest(Simulations) %>%
ggplot(aes(x = x, y = y, col = as.factor(ID), fill = as.factor(ID))) +
geom_point() +
theme_minimal() +
geom_smooth(method = "lm")
# Run linear model on each individual
dat <- mutate(dat, Model = map(Simulations, function(x) {
mod <- lm(y ~ x, data = x)
return(mod)
}))
# Extract model coefficients
dat <- mutate(dat, Coefs = map(Model, function(x) {
coefs <- broom::tidy(x)
return(coefs)
}))
# Show
print(dat)
# Plot the model coefficients
dat %>%
select(ID, Coefs) %>%
unnest(Coefs)
# Plot the model coefficients
dat %>%
select(ID, Coefs) %>%
unnest(Coefs) %>%
ggplot(aes(x = term, y = estimate)) +
geom_point()
# Plot the model coefficients
dat %>%
select(ID, Coefs) %>%
unnest(Coefs) %>%
ggplot(aes(x = term, y = estimate, col = as.factor(ID))) +
geom_point()
# Plot the model coefficients
dat %>%
select(ID, Coefs) %>%
unnest(Coefs) %>%
ggplot(aes(x = term, y = estimate, col = as.factor(ID))) +
geom_point(position = position_dodge())
# Plot the model coefficients
dat %>%
select(ID, Coefs) %>%
unnest(Coefs) %>%
ggplot(aes(x = term, y = estimate, col = as.factor(ID))) +
geom_point(position = position_dodge(width = 0.2))
# Plot the model coefficients
dat %>%
select(ID, Coefs) %>%
unnest(Coefs) %>%
ggplot(aes(x = term, y = estimate, col = as.factor(ID))) +
geom_point(position = position_dodge(width = 0.2)) +
theme_minimal()
dat %>%
select(ID, Coefs) %>%
unnest(Coefs)
# Plot the model coefficients
dat %>%
select(ID, Coefs) %>%
unnest(Coefs) %>%
ggplot(aes(x = term, y = estimate, col = as.factor(ID), ymin = estimate - 1.96 * std.error, ymax = estimate + 1.96 * std.error)) +
geom_point(position = position_dodge(width = 0.2)) +
geom_errorbar(position = position_dodge(width = 0.2)) +
theme_minimal()
# Plot the model coefficients
dat %>%
select(ID, Coefs) %>%
unnest(Coefs) %>%
ggplot(aes(x = term, y = estimate, col = as.factor(ID), ymin = estimate - 1.96 * std.error, ymax = estimate + 1.96 * std.error)) +
geom_point(position = position_dodge(width = 0.2)) +
geom_errorbar(position = position_dodge(width = 0.2), width = 0) +
theme_minimal()
# Create tibble into which we will store the data for the different individuals
dat <- tibble(ID = 1:20)
# Simulate data for each individual
dat <- mutate(dat, Simulations = map(ID, function(x) {
simDat(n = 50)
}))
# Visualize the data
dat %>%
unnest(Simulations) %>%
ggplot(aes(x = x, y = y, col = as.factor(ID), fill = as.factor(ID))) +
geom_point() +
theme_minimal() +
geom_smooth(method = "lm")
# Visualize the data
dat %>%
unnest(Simulations) %>%
ggplot(aes(x = x, y = y, col = as.factor(ID), fill = as.factor(ID))) +
geom_point() +
theme_minimal() +
geom_smooth(method = "lm") +
theme(legend.position = "none")
# Run linear model on each individual
dat <- mutate(dat, Model = map(Simulations, function(x) {
mod <- lm(y ~ x, data = x)
return(mod)
}))
# Extract model coefficients
dat <- mutate(dat, Coefs = map(Model, function(x) {
coefs <- broom::tidy(x)
return(coefs)
}))
# Show
print(dat)
# Plot the model coefficients
dat %>%
select(ID, Coefs) %>%
unnest(Coefs) %>%
ggplot(aes(x = term, y = estimate, col = as.factor(ID), ymin = estimate - 1.96 * std.error, ymax = estimate + 1.96 * std.error)) +
geom_point(position = position_dodge(width = 0.2)) +
geom_errorbar(position = position_dodge(width = 0.2), width = 0) +
theme_minimal()
# Plot the model coefficients
dat %>%
select(ID, Coefs) %>%
unnest(Coefs) %>%
ggplot(aes(x = term, y = estimate, col = as.factor(ID), ymin = estimate - 1.96 * std.error, ymax = estimate + 1.96 * std.error)) +
geom_point(position = position_dodge(width = 0.2)) +
geom_errorbar(position = position_dodge(width = 0.2), width = 0) +
theme_minimal() +
theme(legend.position = "none")
# Compute mean and sd of beta coefficients
dat %>%
select(ID, Coefs) %>%
unnest(Coefs) %>%
group_by(term) %>%
summarize(mean = mean(estimate), sd = sd(estimate))
# Function to simulate data for an individual
simDat <- function(n = 20) {
intercept <- rnorm(1, mean = 2, sd = 1)
slope     <- rnorm(1, mean = 3, sd = 2)
error     <- rnorm(n, mean = 0, sd = 1)
x         <- rnorm(n, mean = 0, sd = 1)
y         <- intercept + slope * x + error
return(data.frame(y, x))
}
# Create tibble into which we will store the data for the different individuals
dat <- tibble(ID = 1:10)
# Simulate data for each individual
dat <- mutate(dat, Simulations = map(ID, function(x) {
simDat(n = 100)
}))
# Visualize the data
dat %>%
unnest(Simulations) %>%
ggplot(aes(x = x, y = y, col = as.factor(ID), fill = as.factor(ID))) +
geom_point() +
theme_minimal() +
geom_smooth(method = "lm") +
theme(legend.position = "none")
# Run linear model on each individual
dat <- mutate(dat, Model = map(Simulations, function(x) {
mod <- lm(y ~ x, data = x)
return(mod)
}))
# Extract model coefficients
dat <- mutate(dat, Coefs = map(Model, function(x) {
coefs <- broom::tidy(x)
return(coefs)
}))
# Show
print(dat)
# Plot the model coefficients
dat %>%
select(ID, Coefs) %>%
unnest(Coefs) %>%
ggplot(aes(x = term, y = estimate, col = as.factor(ID), ymin = estimate - 1.96 * std.error, ymax = estimate + 1.96 * std.error)) +
geom_point(position = position_dodge(width = 0.2)) +
geom_errorbar(position = position_dodge(width = 0.2), width = 0) +
theme_minimal() +
theme(legend.position = "none")
# Compute mean and sd of beta coefficients
dat %>%
select(ID, Coefs) %>%
unnest(Coefs) %>%
group_by(term) %>%
summarize(mean = mean(estimate), sd = sd(estimate))
# Function to simulate data for an individual
simDat <- function(n = 20) {
intercept <- rnorm(1, mean = 2, sd = 1)
slope     <- rnorm(1, mean = 3, sd = 2)
error     <- rnorm(n, mean = 0, sd = 1)
x         <- rnorm(n, mean = 0, sd = 1)
y         <- intercept + slope * x + error
return(data.frame(y, x))
}
# Create tibble into which we will store the data for the different individuals
dat <- tibble(ID = 1:50)
# Simulate data for each individual
dat <- mutate(dat, Simulations = map(ID, function(x) {
simDat(n = 100)
}))
# Visualize the data
dat %>%
unnest(Simulations) %>%
ggplot(aes(x = x, y = y, col = as.factor(ID), fill = as.factor(ID))) +
geom_point() +
theme_minimal() +
geom_smooth(method = "lm") +
theme(legend.position = "none")
# Visualize the data
dat %>%
unnest(Simulations) %>%
ggplot(aes(x = x, y = y, col = as.factor(ID), fill = as.factor(ID))) +
geom_point() +
theme_minimal() +
geom_smooth(method = "lm", lwd = 0.2, alpha = 0.2) +
theme(legend.position = "none")
# Visualize the data
dat %>%
unnest(Simulations) %>%
ggplot(aes(x = x, y = y, col = as.factor(ID), fill = as.factor(ID))) +
geom_point(size = 0.2) +
theme_minimal() +
geom_smooth(method = "lm", lwd = 0.2, alpha = 0.2) +
theme(legend.position = "none")
# Visualize the data
dat %>%
unnest(Simulations) %>%
ggplot(aes(x = x, y = y, col = as.factor(ID), fill = as.factor(ID))) +
geom_point(size = 0.2) +
theme_minimal() +
geom_smooth(method = "lm", lwd = 0.2, alpha = 0.2) +
theme(legend.position = "none")
# Run linear model on each individual
dat <- mutate(dat, Model = map(Simulations, function(x) {
mod <- lm(y ~ x, data = x)
return(mod)
}))
# Extract model coefficients
dat <- mutate(dat, Coefs = map(Model, function(x) {
coefs <- broom::tidy(x)
return(coefs)
}))
# Show
print(dat)
# Plot the model coefficients
dat %>%
select(ID, Coefs) %>%
unnest(Coefs) %>%
ggplot(aes(x = term, y = estimate, col = as.factor(ID), ymin = estimate - 1.96 * std.error, ymax = estimate + 1.96 * std.error)) +
geom_point(position = position_dodge(width = 0.2)) +
geom_errorbar(position = position_dodge(width = 0.2), width = 0) +
theme_minimal() +
theme(legend.position = "none")
# Compute mean and sd of beta coefficients
dat %>%
select(ID, Coefs) %>%
unnest(Coefs) %>%
group_by(term) %>%
summarize(mean = mean(estimate), sd = sd(estimate))
# Create tibble into which we will store the data for the different individuals
dat <- tibble(ID = 1:1000)
# Simulate data for each individual
dat <- mutate(dat, Simulations = map(ID, function(x) {
simDat(n = 100)
}))
# Visualize the data
dat %>%
unnest(Simulations) %>%
ggplot(aes(x = x, y = y, col = as.factor(ID), fill = as.factor(ID))) +
geom_point(size = 0.2) +
theme_minimal() +
geom_smooth(method = "lm", lwd = 0.2, alpha = 0.2) +
theme(legend.position = "none")
# Run linear model on each individual
dat <- mutate(dat, Model = map(Simulations, function(x) {
mod <- lm(y ~ x, data = x)
return(mod)
}))
# Extract model coefficients
dat <- mutate(dat, Coefs = map(Model, function(x) {
coefs <- broom::tidy(x)
return(coefs)
}))
# Show
print(dat)
# Plot the model coefficients
dat %>%
select(ID, Coefs) %>%
unnest(Coefs) %>%
ggplot(aes(x = term, y = estimate, col = as.factor(ID), ymin = estimate - 1.96 * std.error, ymax = estimate + 1.96 * std.error)) +
geom_point(position = position_dodge(width = 0.2)) +
geom_errorbar(position = position_dodge(width = 0.2), width = 0) +
theme_minimal() +
theme(legend.position = "none")
# Compute mean and sd of beta coefficients
dat %>%
select(ID, Coefs) %>%
unnest(Coefs) %>%
group_by(term) %>%
summarize(mean = mean(estimate), sd = sd(estimate))
# Function to simulate data for an individual
simDat <- function(n = 20) {
intercept <- rnorm(1, mean = 2, sd = 1)
slope     <- rnorm(1, mean = 3, sd = 2)
error     <- rnorm(n, mean = 0, sd = 1)
x         <- rnorm(n, mean = 0, sd = 1)
y         <- intercept + slope * x + error
return(data.frame(y, x))
}
# Create tibble into which we will store the data for the different individuals
dat <- tibble(ID = 1:20)
# Simulate data for each individual
dat <- mutate(dat, Simulations = map(ID, function(x) {
simDat(n = 100)
}))
# Visualize the data
dat %>%
unnest(Simulations) %>%
ggplot(aes(x = x, y = y, col = as.factor(ID), fill = as.factor(ID))) +
geom_point(size = 0.2) +
theme_minimal() +
geom_smooth(method = "lm", lwd = 0.2, alpha = 0.2) +
theme(legend.position = "none")
# Run linear model on each individual
dat <- mutate(dat, Model = map(Simulations, function(x) {
mod <- lm(y ~ x, data = x)
return(mod)
}))
# Extract model coefficients
dat <- mutate(dat, Coefs = map(Model, function(x) {
coefs <- broom::tidy(x)
return(coefs)
}))
# Show
print(dat)
# Plot the model coefficients
dat %>%
select(ID, Coefs) %>%
unnest(Coefs) %>%
ggplot(aes(x = term, y = estimate, col = as.factor(ID), ymin = estimate - 1.96 * std.error, ymax = estimate + 1.96 * std.error)) +
geom_point(position = position_dodge(width = 0.2)) +
geom_errorbar(position = position_dodge(width = 0.2), width = 0) +
theme_minimal() +
theme(legend.position = "none")
# Compute mean and sd of beta coefficients
dat %>%
select(ID, Coefs) %>%
unnest(Coefs) %>%
group_by(term) %>%
summarize(mean = mean(estimate), sd = sd(estimate))
# Alternatively, run a mixed model
library(lme4)
dat_unnested <- dat %>%
select(ID, Simulations) %>%
unnest()
dat_unnested <- dat %>%
select(ID, Simulations) %>%
unnest(Simulations)
mod <- lmer(y ~ x + (1 | ID) + (x | ID), data = dat_unnested)
mod <- lmer(y ~ x + (1 + x | ID) + (x | ID), data = dat_unnested)
mod <- lmer(y ~ x + (1 + x | ID), data = dat_unnested)
summary(mod)
# Compute mean and sd of beta coefficients
dat %>%
select(ID, Coefs) %>%
unnest(Coefs) %>%
group_by(term) %>%
summarize(mean = mean(estimate), sd = sd(estimate))
dat_unnested <- dat %>%
select(ID, Simulations) %>%
unnest(Simulations)
mod <- lmer(y ~ x + (1 + x | ID), data = dat_unnested)
summary(mod)
blogdown:::preview_site()
################################################################################
#### Table of Inter-Patch Connectivity
################################################################################
# Clear R's brain
rm(list = ls())
# Change the working directory
wd <- "/home/david/ownCloud/University/15. PhD/Chapter_8"
setwd(wd)
# Load required packages
library(tidyverse)
# Load results on interpatch connectivity
dat <- read_rds("03_Data/03_Results/BootstrappedInterpatchConnectivity.rds")
dat <- subset(dat, FloodLevel != "Mean")
################################################################################
#### Frequency
################################################################################
test <- dat %>%
select(-c(StepNumber, StepNumberSE)) %>%
mutate(Combined = paste(round(dat$Freq), "$\\pm$", round(dat$FreqSE))) %>%
select(-c(Freq, FreqSE)) %>%
pivot_wider(names_from = SourceArea, values_from = Combined) %>%
arrange(CurrentArea, desc(FloodLevel)) %>%
select(CurrentArea, FloodLevel, everything())
library(kableExtra)
kbl(test, )
kbl(test, booktabs = T)
kbl(test, booktabs = T, format = "latex")
knitr::opts_chunk$set(echo = TRUE)
test <- dat %>%
select(-c(StepNumber, StepNumberSE)) %>%
mutate(Combined = paste(round(dat$Freq), "$\\pm$", round(dat$FreqSE))) %>%
select(-c(Freq, FreqSE)) %>%
pivot_wider(names_from = SourceArea, values_from = Combined) %>%
arrange(CurrentArea, desc(FloodLevel)) %>%
select(CurrentArea, FloodLevel, everything())
library(kableExtra)
kbl(test, booktabs = T, format = "latex")
kbl(mtcars[1:8, 1:4], booktabs = T, linesep = "") %>%
kable_styling(latex_options = "striped", stripe_index = c(1,2, 5:6))
