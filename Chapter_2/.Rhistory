# Do some cleaning of the times and dates
cams <- cams %>%
mutate(
StartTime = as_hms(StartTime)
, EndTime   = as_hms(EndTime)
, Start     = ymd_hms(paste(StartDate, StartTime))
, End       = ymd_hms(paste(EndDate, EndTime))
) %>%
mutate(
End = if_else(is.na(End), as.POSIXct(today()), EndDate)
)
# Let's create a unique identifier for each location
cams <- cams %>%
select(Longitude, Latitude) %>%
distinct() %>%
mutate(Location = 1:n()) %>%
mutate(Location = paste0("L", sprintf("%02d", Location))) %>%
left_join(cams, by = c("Longitude", "Latitude"))
# There are also some corrections we need to apply. Again, we need to clean
# times and dates
corrections <- read_xlsx("/home/david/ownCloud/University/15. PhD/General/Cameratrapping/01_General/03_Corrections.xlsx")
corrections <- corrections %>%
mutate(
, FromTime = as_hms(FromTime)
, From     = ymd_hms(paste(FromDate, FromTime))
, ToTime   = as_hms(ToTime)
, To       = ymd_hms(paste(ToDate, ToTime))
)
# Apply the corrections to the metadata
pb <- txtProgressBar(min = 0, max = nrow(corrections), style = 3)
corrected <- list()
for (i in 1:nrow(corrections)) {
indices <- which(meta$Camera == corrections$Camera[i] &
meta$CreateDate >= corrections$From[i] &
meta$CreateDate <= corrections$To[i]
)
if (length(indices) == 0) {
setTxtProgressBar(pb, i)
next
} else {
meta_tocorrect <- meta[indices, ]
meta_tocorrect$CreateDate <- meta_tocorrect$CreateDate +
ddays(corrections$`Correction (days)`[i])
corrected[[i]] <- meta_tocorrect
meta <- meta[-indices, ]
setTxtProgressBar(pb, i)
}
}
# Bind the corrected data to the data that was already correct
meta <- corrected %>%
do.call(rbind, .) %>%
rbind(., meta) %>%
arrange(Camera, FetchDate, CreateDate)
# We also want to assign the deployment information to each image. Thus, loop
# through the deployments and assign the associated images
cams$Images <- pbmclapply(
X                  = 1:nrow(cams)
, ignore.interactive = T
, mc.cores           = detectCores() - 1
, FUN                = function(x) {
imgs <- subset(meta
, Camera == cams$CameraID[x] &
CreateDate >= cams$Start[x] &
CreateDate <= cams$End[x]
)
return(imgs)
})
# Unnest
meta <- unnest(cams, Images)
# Compute some useful time measures
meta$Date  <- as_date(meta$CreateDate)
meta$Year  <- year(meta$CreateDate)
meta$Month <- month(meta$CreateDate)
meta$Day   <- day(meta$CreateDate)
meta$Hour  <- as_hms(round_date(meta$CreateDate, "hour"))
# Combine metadata and detections
dete <- nest(dete, Detections = -images)
dat <- left_join(meta, dete, by = c("Filepath" = "images"))
dete <- unnest(dete, Detections)
# Remove undesired columns
dat <- select(dat, -c(Group, Filetype, FetchDate, SourceFile, Done))
# Indicate the number of detections for each image
dat$NumberDetections <- sapply(dat$Detections, function(x) {
if (is.null(x)) {
return(0)
} else {
return(nrow(x))
}
})
# Reorder
dat <- select(dat, c(Filepath, Camera, CreateDate, NumberDetections, Detections, everything()))
# Clean up
rm(cams, corrected, corrections, i, imagedir, indices, meta, meta_tocorrect, pb)
# Function to determine the season within which a date falls
getSeason <- function(x) {
DS <- as.Date("2020-04-01", format = "%Y-%m-%d") # Start Dry
WS <- as.Date("2020-11-01", format = "%Y-%m-%d") # Start Wet
# Convert dates from any year to 2020 dates
d <- as.Date(strftime(x, format = "2020-%m-%d"))
# Identify season
season <- ifelse(d >= DS & d < WS, "Dry", "Wet")
# Return the season
return(season)
}
# Apply it to our data
dat$Season <- getSeason(dat$CreateDate)
# Total number of images
total_imgs <- round(nrow(dat) / 1e6, 2)
# Date of the last image in the database
enddate <- max(dat$CreateDate, na.rm = T)
enddate_month <- as.character(month(enddate, label = T, abbr = F))
enddate_year  <- as.character(year(enddate))
# Some counts of cameratrap images
prop_season <- dat %>% count(Season) %>% mutate(Percent = round(`n` / sum(`n`) * 100))
prop_habitat <- dat %>% count(Habitat) %>% mutate(Percent = round(`n` / sum(`n`) * 100))
print(names(dat))
prop_habitat
dat %>%
mutate(ContainsDetection = NumberDetections > 0) %>%
count(ContainsDetection) %>%
mutate(Percent = `n` / sum(`n`))
dat %>%
mutate(ContainsDetection = NumberDetections > 0) %>%
count(ContainsDetection) %>%
mutate(Percent = round(`n` / sum(`n`) * 100))
prop_detections <- dat %>%
mutate(ContainsDetection = NumberDetections > 0) %>%
count(ContainsDetection) %>%
mutate(Percent = round(`n` / sum(`n`) * 100))
View(prop_detections)
View(dat)
habitats$n[2]
# Load deployments
dat <- read_xlsx("/home/david/ownCloud/University/15. PhD/General/Cameratrapping/01_General/01_Deployments.xlsx")
# Here, we only want to consider the original deployments
dat <- dat[1:57, ]
dat
View(dat)
height_mean <- mean(dat$Height)
height_sd <- sd(dat$Height)
height_mean <- round(mean(dat$Height))
height_sd <- round(sd(dat$Height), 2)
height_mean <- round(mean(dat$Height), 1)
height_sd <- round(sd(dat$Height), 2)
dist_mean <- round(mean(dat$DistanceToRoad), 1)
dat$DistanceToRoad
dist_mean <- round(mean(as.numeric(dat$DistanceToRoad)), 1)
dist_sd <- round(sd(as.numeric(dat$DistanceToRoad)), 2)
dist_mean <- round(mean(as.numeric(dat$DistanceToRoad)))
dist_sd <- round(sd(as.numeric(dat$DistanceToRoad)))
dat <- read.csv("/home/david/ownCloud/ACT.CSV")
View(dat)
View(dat)
plot(dat$Accel_x)
par(mfrow = c(3, 1))
plot(dat$Accel_x, type = "l")
par(mfrow = c(3, 1))
plot(dat$Accel_x, type = "l")
par(mfrow = c(3, 1))
plot(dat$Accel_x, type = "l")
plot(dat$Accel_y, type = "l")
plot(dat$Accel_z, type = "l")
plot(dat$Accel_x, type = "l")
abline(h = 0)
par(mfrow = c(3, 1))
plot(dat$Accel_x, type = "l")
abline(h = 0, lty = 2)
plot(dat$Accel_y, type = "l")
abline(h = 0, lty = 2)
plot(dat$Accel_z, type = "l")
abline(h = 0, lty = 2)
plot(abs(dat$Accel_x), type = "l")
par(mfrow = c(3, 1))
plot(abs(dat$Accel_x), type = "l")
plot(abs(dat$Accel_y), type = "l")
plot(abs(dat$Accel_z), type = "l")
plot(dat$Temp, type = "l")
View(dat)
par(mfrow = c(4, 1))
plot(dat$Accel_x, type = "l")
par(mfrow = c(4, 1))
plot(dat$Accel_x, type = "l")
plot(dat$Accel_y, type = "l")
plot(dat$Accel_z, type = "l")
plot(dat$Temp, type = "l")
dat <- read.csv("/home/david/ownCloud/ACT (2).CSV.CSV")
dat <- read.csv("/home/david/ownCloud/ACT (2).CSV.CSV")
dat <- read.csv("/home/david/ownCloud/ACT (2).CSV")
View(dat)
dat <- read.csv("/home/david/ownCloud/ACT (2).CSV")
par(mfrow = c(4, 1))
plot(dat$Accel_x, type = "l")
plot(dat$Accel_y, type = "l")
plot(dat$Accel_z, type = "l")
plot(dat$Temp, type = "l")
View(dat)
library(tidyverse)
library(lubridate)
library(hms)
library(plotly)
# Load activity data
dat <- "/home/david/ownCloud/Dokumente/Bibliothek/Wissen/R-Scripts/NalaActivity/2022-12-01_Activity.csv" %>%
read_csv() %>%
mutate(Date = ymd(Date), Time = as_hms(Time)) %>%
mutate(Timestamp = ymd_hms(paste(Date, Time))) %>%
select(-c(Date, Time)) %>%
select(Timestamp, everything())
# Visualize the data
p <- dat %>%
pivot_longer(Accel_x:Accel_z, names_to = "Variable", values_to = "Value") %>%
ggplot(aes(x = Timestamp, y = Value)) +
geom_line() +
facet_wrap(~ Variable, ncol = 1) +
theme_minimal()
# Visualize dynamically
ggplotly(p)
################################################################################
#### Spider Plot Animation
################################################################################
# Clear R's brain
rm(list = ls())
# Change the working directory
wd <- "/home/david/ownCloud/University/15. PhD/Chapter_2"
setwd(wd)
# Load required packages
library(tidyverse)
library(scales)
library(gganimate)
options(gganimate.dev_args = list(bg = 'transparent'))
library(tidyverse)
library(scales)
library(gganimate)
################################################################################
#### Still Image
################################################################################
# Dataframe containing seasonal habitat preferences
df_wet <- tibble(
Covariate   = c("Water", "DistanceToWater", "Grassland", "Woodland", "Humans", "cos_ta", "sl", "log_sl")
#   , Beta        = c(-0.5, 0, -0.2, 0.5, -0.2, -0.5)
, Beta        = rnorm(length(Covariate), mean = 0, sd = 2)
, Season      = "Wet"
)
df_dry <- tibble(
Covariate   = c("Water", "DistanceToWater", "Grassland", "Woodland", "Humans", "cos_ta", "sl", "log_sl")
#   , Beta        = c(-0.2, -0.8, 0.2, +0.2, -0.8)
, Beta        = rnorm(length(Covariate), mean = 0, sd = 2)
, Season      = "Dry"
)
# Put the two dataframes together
dat      <- rbind(df_wet, df_dry)
dat$Beta <- rescale(dat$Beta)
# Function to create circular coordinates
spiderCoords <- function(value, distance, angle) {
x <- (value + distance) * sin(angle)
y <- (value + distance) * cos(angle)
xy <- data.frame(x = x, y = y)
return(xy)
}
# Function to create circles
spiderCircles <- function(ymin = 1, ymax = 2, breaks = 3) {
r <- seq(ymin, ymax, length.out = breaks)
angles <- seq(0, 2 * pi, by = 0.05)
crds <- lapply(r, function(i) {
xy <- spiderCoords(i, distance = 0, angle = angles)
xy$r <- i
return(xy)
})
crds <- do.call(rbind, crds)
return(crds)
}
# Function to create lines
spiderLines <- function(ymin = 1, ymax = 2, breaks = NULL) {
angles <- seq(0, 2 * pi, length.out = breaks + 1)
angles <- angles[-length(angles)]
crds <- lapply(angles, function(i) {
from <- spiderCoords(ymin, distance = 0, angle = i)
to   <- spiderCoords(ymax, distance = 0, angle = i)
xy   <- data.frame(x1 = from[, 1], y1 = from[, 2], x2 = to[, 1], y2 = to[, 2])
xy$r <- i
return(xy)
})
crds <- do.call(rbind, crds)
return(crds)
}
# Function to prepare data for spider plot
spiderData <- function(data, value, group, distance = 0) {
# Create unique group ids
data <- data %>%
group_by_(group) %>%
mutate(GroupID = cur_group_id()) %>%
ungroup()
# Calculate angle for each group
angles <- seq(0, 2 * pi, length.out = length(unique(data$GroupID)) + 1)
angles <- angles[-length(angles)]
angles <- data.frame(GroupID = 1:length(angles), Angle = angles)
# Put together
data <- left_join(data, angles, by = "GroupID")
# Compute coordinates for each entry
xy <- spiderCoords(value = data$Beta, distance = distance, angle = data$Angle)
data <- cbind(data, xy)
data <- arrange(data, GroupID)
# Return it
return(data)
}
# Function to generate all data for the spider plot
spiderPlotData <- function(data
, group        = NULL
, value        = NULL
, distance     = 0
, label_offset = 0
) {
# Testing
#   data <- dat
#   value <- "Beta"
#   group <- "Covariate"
#   distance <- 1
#   label_offset <- 1
# Prepare data
spider_dat <- spiderData(data, value, group, distance)
# Get necessary metrics
groups <- unique(pull(spider_dat, group))
ngroups <- length(groups)
maxval <- max(pull(data, value))
# Prepare circles, lines, and labels
spider_cir <- spiderCircles(
ymin = distance
, ymax = maxval + distance
)
spider_lin <- spiderLines(
ymin   = distance
, ymax   = maxval + distance
, breaks = ngroups
)
spider_lab <- spiderLines(
ymin   = distance
, ymax   = maxval + distance + label_offset
, breaks = ngroups
)
spider_lab$Label <- groups
# Return all
return(list(
Data    = spider_dat
, Circles = spider_cir
, Lines   = spider_lin
, Labels  = spider_lab
)
)
}
# Prepare the plot
dat_plot <- spiderPlotData(dat
, group        = "Covariate"
, value        = "Beta"
, distance     = 1
, label_offset = 0.5
)
# Plot it
ggplot() +
geom_polygon(data = dat_plot$Circles
, aes(x = x, y = y, group = r)
, fill  = NA
, col   = "gray80"
, lty   = 2
) +
geom_segment(data = dat_plot$Lines
, aes(x = x1, y = y1, xend = x2, yend = y2, group = r)
, col  = "gray80"
, lty  = 2
) +
geom_polygon(data = dat_plot$Data
, aes(x = x, y = y)
, fill      = "orange"
, col       = "orange"
, linewidth = 1
, alpha     = 0.5
) +
geom_point(data = dat_plot$Data
, aes(x = x, y = y)
, col  = "orange"
, size = 5
) +
geom_text(data = dat_plot$Labels
, aes(x = x2, y = y2, label = Label)
, size = 3
) +
coord_equal() +
facet_wrap(~ Season) +
theme_void() +
theme(strip.text = element_blank())
################################################################################
#### Animation
################################################################################
# Animate it
p <- ggplot() +
geom_polygon(data = dat_plot$Circles
, aes(x = x, y = y, group = r)
, fill  = NA
, col   = "gray80"
, lty   = 2
) +
geom_segment(data = dat_plot$Lines
, aes(x = x1, y = y1, xend = x2, yend = y2, group = r)
, col  = "gray80"
, lty  = 2
) +
geom_polygon(data = dat_plot$Data
, aes(x = x, y = y)
, fill      = "orange"
, col       = "orange"
, linewidth = 1
, alpha     = 0.5
) +
geom_point(data = dat_plot$Data
, aes(x = x, y = y)
, col  = "orange"
, size = 5
) +
geom_text(data = dat_plot$Labels
, aes(x = x2, y = y2, label = Label)
, size = 5
) +
coord_equal() +
transition_states(Season, transition_length = 5, state_length = 0) +
theme_void() +
theme(
strip.text = element_blank()
, plot.background = element_blank()
, panel.background = element_blank()
)
anim_save(filename = "05_Presentation/SpiderAnimation.gif", animation = p)
################################################################################
#### Animation
################################################################################
# Animate it
p <- ggplot() +
geom_polygon(data = dat_plot$Circles
, aes(x = x, y = y, group = r)
, fill  = NA
, col   = "gray80"
, lty   = 2
) +
geom_segment(data = dat_plot$Lines
, aes(x = x1, y = y1, xend = x2, yend = y2, group = r)
, col  = "gray80"
, lty  = 2
) +
geom_polygon(data = dat_plot$Data
, aes(x = x, y = y)
, fill      = "orange"
, col       = "orange"
, linewidth = 1
, alpha     = 0.5
) +
geom_point(data = dat_plot$Data
, aes(x = x, y = y)
, col  = "orange"
, size = 5
) +
geom_text(data = dat_plot$Labels
, aes(x = x2, y = y2, label = Label)
, size = 5
) +
coord_equal() +
transition_states(Season, transition_length = 5, state_length = 0) +
theme_void() +
theme(
strip.text = element_blank()
, plot.background = element_rect(fill = "gray30")
, panel.background = element_rect(fill = "gray30")
)
anim_save(filename = "05_Presentation/SpiderAnimation.gif", animation = p)
################################################################################
#### Animation
################################################################################
# Animate it
p <- ggplot() +
geom_polygon(data = dat_plot$Circles
, aes(x = x, y = y, group = r)
, fill  = NA
, col   = "gray80"
, lty   = 2
) +
geom_segment(data = dat_plot$Lines
, aes(x = x1, y = y1, xend = x2, yend = y2, group = r)
, col  = "gray80"
, lty  = 2
) +
geom_polygon(data = dat_plot$Data
, aes(x = x, y = y)
, fill      = "orange"
, col       = "orange"
, linewidth = 1
, alpha     = 0.5
) +
geom_point(data = dat_plot$Data
, aes(x = x, y = y)
, col  = "orange"
, size = 5
) +
geom_text(data = dat_plot$Labels
, aes(x = x2, y = y2, label = Label)
, size = 5
, col  = "white"
) +
coord_equal() +
transition_states(Season, transition_length = 5, state_length = 0) +
theme_void() +
theme(
strip.text = element_blank()
, plot.background = element_rect(fill = "gray30")
, panel.background = element_rect(fill = "gray30")
)
anim_save(filename = "05_Presentation/SpiderAnimation.gif", animation = p)
